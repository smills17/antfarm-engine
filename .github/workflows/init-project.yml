name: Deployed to Section
on:
  push:
    branches: [main, create-project-webhook]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  REPO:  ${{ github.repository }}

jobs:
  build-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: downcase REPO
        run: |
          echo "IMAGE_NAME=${REPO,,}" >>${GITHUB_ENV}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images:  ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Deploy on Section
        env:
          SECTION_K8S_API_URL: '${{ secrets.SECTION_K8S_API_URL }}'
          SECTION_API_TOKEN: '${{ secrets.SECTION_API_TOKEN }}'
          DEBUG: 1
        run: |
          #!/bin/bash
          test -z "${DEBUG}" || set -o xtrace
          set -o errexit
          
          cd "$(dirname "$0")"
          
          cert=/etc/ssl/certs/ca-certificates.crt
          
          main() {
            setCluster
          
            envsubst '$IMAGE_NAME' < ${GITHUB_WORKSPACE}/k8s/deploy.yaml | kubectl apply -f -
            kubectl apply -f ${GITHUB_WORKSPACE}/k8s/ingress-upstream.yaml
          
            kubectl rollout restart deployment section-project-deployment
          }
          
          setCluster() {
            # Configure kubectl to talk to Section
            
            # change the cert path depending on OS.
            if [[ "$OSTYPE" == "darwin"* ]]; then
              cert=/usr/local/etc/ca-certificates/cert.pem
            fi
          
            kubectl config set-cluster section             --server=$SECTION_K8S_API_URL             --certificate-authority=$cert
          
            kubectl config set-credentials section-user --token=$SECTION_API_TOKEN
          
            kubectl config set-context my-section-application --cluster=section --user=section-user --namespace=default
          
            kubectl config use-context my-section-application
          
            kubectl version
          }
          main
          "$@"
